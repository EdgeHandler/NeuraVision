SYSTEM LEVEL PACKAGES:
-sudo apt-get update
-sudo apt-get upgrade
SYSTEM LEVEL DEPENDENCIES:
-sudo apt-get install git cmake libatlas-base-dev gfortran libhdf5-serial-dev hdf5-tools python3-dev nano locate libfreetype6-dev python3-setuptools protobuf-compiler libprotobuf-dev openssl libssl-dev libcurl4-openssl-dev cython3 libxml2-dev libxslt1-dev

UPDATE CMAKE:
- wget http://www.cmake.org/files/v3.22/cmake-3.22.0.tar.gz
- tar -xpvf cmake-3.22.0.tar.gz cmake-3.22.0/

COMPILE CMAKE:
- cd cmake-3.22.0/
./bootstrap --system-curl
- make -j4

UPDATE BASH PROFILE:
-echo 'export PATH=/home/nvidia/cmake-3.22.0/bin/:$PATH' >> ~/.bashrc
-source ~/.bashrc

SUPPORTING LIBRARIES FOR OPENCV:
-sudo apt-get install build-essential pkg-config libtbb2 libtbb-dev libavcodec-dev libavformat-dev libswscale-dev libxvidcore-dev libavresample-dev libtiff-dev libjpeg-dev libpng-dev python-tk libgtk-3-dev libcanberra-gtk-module libcanberra-gtk3-module libv4l-dev libdc1394-22-dev



INSTALL OPENCV (4.1.2)FROM SCRATCH WITH CUDA SUPPORT:
-wget -o opencv.zip https://github.com/opencv/opencv/archive/4.1.2.zip
-wget -o opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.2.zip
-unzip 4.1.2.zip   -opencv.zip-
-unzip 4.1.2.zip.1 -opencv contrib.zip-
-mv opencv-4.1.2 opencv
-mv opencv contrib-4.1.2 opencv_contrib
-cd opencv
mkdir build
cd build
pwd
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
TO BE USED!!!!!!
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
sudo cmake -D CMAKE_BUILD_TYPE=RELEASE\
-D WITH_CUDA=ON \
-D WItH_CUDNN=ON \
-D CUDA_ARCH_PTX="" \
-D CUDA_ARCH_BIN="5.3,6.2,7.2" \
-D WITH_CUBLAS=ON \
-D OPENCV_DNN_CUDA=ON \
-D ENABLE_FAST_MATH=1 \
-D CUDA_FAST_MATH=1 \
-D WITH_LIBV4L=ON \
-D BUILD_opencv_python3=ON \
-D BUILD_opencv_python2=OFF \
-D BUILD_opencv_java=OFF \
-D WITH_GSTREAMER=ON \
-D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 \
-D CUDNN_LIBRARY=/usr/lib/aarch64-linux-gnu/ \
-D CUDNN_INCLUDE_PATH=/usr/include \
-D WITH_GTK=ON \
-D BUILD_TESTS=OFF \
-D BUILD_PERF_TESTS=OFF \
-D BUILD_EXAMPLES=OFF \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH=/home/`whoami`/opencv_contrib/modules ..
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
cmake -D CMAKE_BUILD_TYPE=RELEASE -D WITH_CUDA=ON -D CUDAARCH_PTX="" -D CUDA_ARCH_BIN="5.3" -D WITH_CUBLAS=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python3=ON -D BUILD_opencv_python2=OFF -D BUILD_opencv_java=OFF -D WITH_GSTREAMER=ON -D WITH_GTK=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/edge/opencv_contrib/modules ..

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
AT PRESET WORKED WITH CUDNN.
cmake \
-D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_CUDA=ON \
-D WITH_CUDNN=ON \
-D WITH_CUBLAS=ON \
-D WITH_TBB=ON \
-D OPENCV_DNN_CUDA=ON \
-D OPENCV_ENABLE_NONFREE=ON \
-D CUDA_ARCH_BIN="5.3" \
-D WITH_GSTREAMER=ON \
-D OPENCV_EXTRA_MODULES_PATH=$HOME/opencv_contrib/modules \
-D BUILD_EXAMPLES=OFF \
-D HAVE_opencv_python3=ON \
..
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
To NOT be used!!!!!!!!
+++++++++++++++++++++++++++++++++++++++++++++++++++++
cmake -D CMAKE_BUILD_TYPE=RELEASE\
-D WITH_CUDA=ON \
-D CUDA_ARCH_PTX="" \
-D CUDA_ARCH_BIN="5.3.6.2.7.2" \
-D WITH_CUBLAS=ON \
-D WITH_LIBV4L=ON \
-D BUILD_opencv_python3=ON \
-D BUILD_opencv_python2=OFF \
-D BUILD_opencv_java=OFF \
-D WITH_GSTREAMER=ON \
-D WITH_GTK=ON \
-D BUILD_TESTS=FALSE \
-D BUILD_PERF_TESTS=FALSE \
-D BUILD EXAMPLES=OFF \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH=/home/`whoami`/opencv_contrib/modules ..
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


make -j4	
sudo make install


###################################################################
https://www.youtube.com/watch?v=UiZaM-Wbc6A


###################################################################

From the terminal:

 nano /home/username/.bashrc

 # or

sudo vi /home/$USER/.bashrc
Inside there add the following: (replace cuda-8.0 with your version)

 export PATH="/usr/local/cuda-8.0/bin:$PATH"
 export LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH"
Then do the following to save and close the editor:

 On you keyboard press the following: 

 ctrl + o             --> save 
 enter or return key  --> accept changes
 ctrl + x             --> close editor
Now either do source .bashrc or close and open another terminal

Now run nvcc --version

Information:

.bashrc: is the file read by the terminal before opening and its found in the /home/$USER diretory of the user in question.
the . before the file means its hidden from view unless you instruct you file manager to show hidden files
----------------------------------------------------------------------------------------------------------
ln -s ~path to your new cv2.so file~ /usr/local/lib/python2.7/site-packages/cv2.so


cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D BUILD_EXAMPLES=OFF \
-D INSTALL_PYTHON_EXAMPLES=OFF \
-D INSTALL_C_EXAMPLES=OFF \
-D PYTHON_EXECUTABLE=$(which python2) \
-D BUILD_opencv_python2=OFF \
-D PYTHON3_EXECUTABLE=$(which python3) \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules/ \
-D WITH_GSTREAMER=ON \
-D WITH_CUDA=ON \
-D WITH_CUDNN=ON \
-D CUDA_ARCH_BIN=5.3 \
-D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
-D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
 ..
